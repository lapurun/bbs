<!DOCTYPE html>
<html>
  <head>
    <title>TeX練習機</title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    <div class="wrapper">
      <div class="main article">
          <h1 class="title"><a href="/">bbcApp</a></h1>
        <h2>$TeX$練習機</h2>
        <p>$TeX$の練習ができます。わからないことは
            <a href="http://memopad.bitter.jp/web/mathjax/TeXSyntax.html">MathJax で利用可能な TEX コマンド（非公式）</a>で
        </p>
        <div id="text">
            <textarea id = "input" name="message" rows="10" cols="70"></textarea>
        </div>
        <input id="display" type="checkbox" checked="" onchange="convert()">
        <label for="display">Display style</label>
        <input id="render" type="button" value="render" onclick="convert()">
        <div id="output"></div>
        <hr>
        <a href="/">Home</a>
      </div>
      <div class="main ad">広告:</div>
    </div>
    
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"></script>
    <script>
      MathJax = {
        tex: {inlineMath: [['$', '$'], ['\\(', '\\)']]}
      };
    </script>
    <script>
      function convert() {
        //
        //  Get the TeX input
        //
        var input = document.getElementById("input").value.trim();
        //
        //  Disable the display and render buttons until MathJax is done
        //
        var display = document.getElementById("display");
        var button = document.getElementById("render");
        button.disabled = display.disabled = true;
        //
        //  Clear the old output
        //
        output = document.getElementById('output');
        output.innerHTML = '';
        //
        //  Reset the tex labels (and automatic equation numbers, though there aren't any here).
        //  Get the conversion options (metrics and display settings)
        //  Convert the input to CommonHTML output and use a promise to wait for it to be ready
        //    (in case an extension needs to be loaded dynamically).
        //
        MathJax.texReset();
        var options = MathJax.getMetricsFor(output);
        options.display = display.checked;
        MathJax.tex2chtmlPromise(input, options).then(function (node) {
          //
          //  The promise returns the typeset node, which we add to the output
          //  Then update the document to include the adjusted CSS for the
          //    content of the new equation.
          //
          output.appendChild(node);
          MathJax.startup.document.clear();
          MathJax.startup.document.updateDocument();
        }).catch(function (err) {
          //
          //  If there was an error, put the message into the output instead
          //
          output.appendChild(document.createElement('pre')).appendChild(document.createTextNode(err.message));
        }).then(function () {
          //
          //  Error or not, re-enable the display and render buttons
          //
          button.disabled = display.disabled = false;
        });
      }
    </script>

  </body>
</html>
